import fitz  # PyMuPDF
import pandas as pd


# Function to extract text from a PDF
def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    all_text = []

    for page in doc:
        text = page.get_text("text")
        all_text.extend(text.split("\n"))  # Store each line separately

    return all_text


# Function to extract structured data dynamically
def extract_and_clean_data(text_lines):
    structured_data = []
    i = 0

    while i < len(text_lines) - 4:  # Ensure there are enough lines to extract
        if text_lines[i].strip() == "Fund" and text_lines[i + 1].strip() == "NAV":
            # Extract next fund data
            fund_name = text_lines[i + 4].strip()
            nav = text_lines[i + 5].strip()
            record_date = text_lines[i + 6].strip()
            distributions = text_lines[i + 7].strip()

            structured_data.append(
                {"Fund": fund_name, "NAV": nav, "Record Date": record_date, "Distributions": distributions})

            i += 8  # Move index forward to next set of data
        else:
            i += 1  # Keep searching if we haven't hit a "Fund" header

    return structured_data


# Function to export structured data to Excel
def export_to_excel(structured_data, output_path="extracted_funds.xlsx"):
    df = pd.DataFrame(structured_data)

    if df.empty:
        print("❌ No structured data found. Check extracted text formatting.")
    else:
        df.to_excel(output_path, index=False)
        print(f"✅ Extracted data saved to {output_path}")


# Main function
def main():
    pdf_path = "/Users/josedhernandez/Desktop/fake_capital_gains_final.pdf"  # Replace with actual PDF path

    # Extract raw text
    text_data = extract_text_from_pdf(pdf_path)

    # Extract and clean the structured data
    structured_data = extract_and_clean_data(text_data)

    # Display the cleaned data
    print("\n📊 Cleaned Extracted Data:\n", pd.DataFrame(structured_data))

    # Export to Excel
    export_to_excel(structured_data)


# Run the program
if __name__ == "__main__":
    main()
