



import fitz  # PyMuPDF for PDF text extraction
import pandas as pd
import streamlit as st
import re


# Function to extract text from an uploaded PDF file
def extract_text_from_pdf(uploaded_file):
    doc = fitz.open(stream=uploaded_file.read(), filetype="pdf")
    extracted_data = []

    for page_num, page in enumerate(doc):
        text = page.get_text("text")
        lines = text.split("\n")
        extracted_data.append((page_num + 1, lines))  # Store lines with page numbers

    return extracted_data


# Function to find values near keywords
def find_values_near_keywords(text_data, search_terms):
    structured_data = []
    keyword_patterns = {term["word"]: re.compile(rf"\b{re.escape(term['word'])}\b", re.IGNORECASE) for term in
                        search_terms}

    for page_num, lines in text_data:
        extracted_info = {"Page": page_num}  # Initialize extracted fields for each page

        for i, line in enumerate(lines):
            for term in search_terms:
                keyword = term["word"]
                value_type = term["type"]
                pattern = keyword_patterns[keyword]

                if pattern.search(line):
                    # Try to find value directly after keyword
                    match = re.search(rf"{keyword}[:\s]+([\w\.\-/]+)", line, re.IGNORECASE)
                    if match:
                        extracted_info[keyword] = match.group(1)
                    else:
                        # If value not found inline, check the next 2 lines
                        for offset in range(1, 3):
                            if i + offset < len(lines):
                                potential_value = lines[i + offset].strip()

                                # Validate based on expected type
                                if value_type == "Number" and re.match(r"^[\d\.\-/]+$", potential_value):
                                    extracted_info[keyword] = potential_value
                                    break
                                elif value_type == "Name" and re.match(r"^[A-Za-z\s]+$", potential_value):
                                    extracted_info[keyword] = potential_value
                                    break

        # Only add structured data if values were found
        if any(key in extracted_info for key in keyword_patterns.keys()):
            structured_data.append(extracted_info)

    return structured_data


# Function to process extracted data into a structured format
def process_extracted_data(structured_data):
    df = pd.DataFrame(structured_data)
    df.fillna("N/A", inplace=True)  # Fill missing values
    return df


# Function to export structured data to Excel
def export_to_excel(df):
    if df.empty:
        return None

    output_path = "structured_extracted_data.xlsx"
    df.to_excel(output_path, index=False)
    return output_path


# Streamlit UI
st.title("📄 PDF Data Extractor")

# Upload PDF file
uploaded_file = st.file_uploader("Upload a PDF file", type=["pdf"])

# User input for search terms
st.subheader("🔍 Enter up to 10 search terms and specify value type")
search_terms = []
for i in range(10):
    col1, col2 = st.columns([2, 1])
    with col1:
        keyword = st.text_input(f"Keyword {i + 1} (Leave blank if not needed)", key=f"keyword_{i}")
    with col2:
        value_type = st.selectbox(f"Type {i + 1}", ["Number", "Name"], key=f"type_{i}")

    if keyword:
        search_terms.append({"word": keyword, "type": value_type})

# Process PDF if uploaded
if uploaded_file and search_terms:
    text_data = extract_text_from_pdf(uploaded_file)
    extracted_data = find_values_near_keywords(text_data, search_terms)
    structured_df = process_extracted_data(extracted_data)

    # Display extracted data in Streamlit
    if not structured_df.empty:
        st.subheader("📊 Extracted Data Preview")
        st.dataframe(structured_df)

        # Save and provide download link for Excel file
        excel_file = export_to_excel(structured_df)
        with open(excel_file, "rb") as f:
            st.download_button("📥 Download Extracted Data", f, file_name="extracted_data.xlsx",
                               mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    else:
        st.warning("❌ No structured data found. Try adjusting the keywords or check the PDF format.")
